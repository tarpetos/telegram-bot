import time
import os
import extract_random_data
import create_meme

from parse_temprature import *
from currency_cost import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from converter_keyboard import converter_keyboard
from currency_keyboard import currency_keyboard
from random_numbers_keyboard import keyboard_random
from random import randint, choice
from aiogram.types import InputFile, ContentType, ReplyKeyboardRemove
from config import API_TOKEN, COMMANDS_LIST
from datetime import date
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class ConverterForm(StatesGroup):
    dollar = State()
    euro = State()
    hryvnia = State()


class WeatherInfo(StatesGroup):
    place = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer('–®–¢–£–ß–ù–ò–ô –Ü–ù–¢–ï–õ–ï–ö–¢ –î–¢–†-1')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(text=COMMANDS_LIST)
    await message.delete()


@dp.message_handler(commands=['random'])
async def randomize(message: types.Message):
    await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —á–∏—Å–ª–∞:', reply_markup=keyboard_random)


@dp.callback_query_handler(text=['random_value_1', 'random_value_2', 'random_value_3', 'random_value_4'])
async def choose_random(call: types.CallbackQuery):
    if call.data == 'random_value_1':
        await call.message.answer(f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(0, 10)}</code> üé≤',
                                  parse_mode='HTML')
    elif call.data == 'random_value_2':
        await call.message.answer(f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(0, 100)}</code> üé≤',
                                  parse_mode='HTML')
    elif call.data == 'random_value_3':
        await call.message.answer(f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(-100, 100)}</code> üé≤',
                                  parse_mode='HTML')
    elif call.data == 'random_value_4':
        await call.message.answer(f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(-1000000, 1000000)}</code> üé≤',
                                  parse_mode='HTML')

    await call.answer()


@dp.message_handler(commands=['eugene'])
async def mark_eugene(message: types.Message):
    await message.reply('–ö–æ–º–∞–Ω–¥–∞ "eugene" —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î.ü§∑‚Äç')


@dp.message_handler(commands=['id'])
async def alarm(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup()
    user_id_btn = types.InlineKeyboardButton('ID', callback_data='user_id')
    keyboard_markup.row(user_id_btn)

    if message.from_user.username is not None:
        message.from_user.username = f'<code>{message.from_user.username}</code>'
    else:
        message.from_user.username = f'<span class="tg-spoiler"><b><i>–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î —ñ–º–µ–Ω—ñü§∑</i></b></span>'

    await message.answer(f'–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {message.from_user.username}\n'
                         f'URL: {message.from_user.url}\n\n'
                         '–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤—ñ–π ID...', parse_mode='HTML', reply_markup=keyboard_markup)

    await message.delete()


@dp.callback_query_handler(text='user_id')
async def user_id_inline_callback(callback_query: types.CallbackQuery):
    await callback_query.answer(f"–í–∞—à ID: {callback_query.from_user.id}", True)


@dp.message_handler(commands=['time'])
async def search_time(message: types.Message):
    delta = date(time.localtime().tm_year, time.localtime().tm_mon, time.localtime().tm_mday) - date(2022, 2, 23)
    days_of_unity = date(time.localtime().tm_year, time.localtime().tm_mon, time.localtime().tm_mday) - date(1919, 1,
                                                                                                             21)

    await message.reply(
        f'–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞:\t{datetime.now().strftime("%d.%m.%Y")}üìÖ\n'
        f'–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:\t{datetime.now().strftime("%H:%M:%S")}üïî\n'
        f'–î–µ–Ω—å —Ç–∏–∂–Ω—è:\t{datetime.now().strftime("%A")}\n'
        f'–î–µ–Ω—å —Ä–æ–∫—É:\t{time.localtime().tm_yday}üåû\n'
        f'–ö-—Å—Ç—å –¥–Ω—ñ–≤ –∑ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è:\t{delta.days}üïä\n'
        f'–î–Ω—ñ–≤ –°–æ–±–æ—Ä–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏:\t{days_of_unity.days}ü§ù'
    )

    anniversary = time.localtime().tm_year - 1919

    if time.localtime().tm_mon == 1 and time.localtime().tm_mday == 22:
        await message.answer(f'–£–†–ê–ê–ê–ê, {anniversary} –†–Ü–ß–ù–ò–¶–Ø –°–û–ë–û–†–ù–û–°–¢–Ü –£–ö–†–ê–á–ù–ò')


@dp.message_handler(commands=['sticker'])
async def get_sticker(message: types.Message):
    data = extract_random_data.get_sticker()
    await bot.send_sticker(message.chat.id, sticker=f'{extract_random_data.get_random_data(data)}')
    await message.delete()


@dp.message_handler(commands=['weather'])
async def weather(message: types.Message):
    await WeatherInfo.place.set()
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞...')


@dp.message_handler(state=WeatherInfo.place)
async def process_weather(message: types.Message, state: FSMContext):
    input_place = message.text

    url = f'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-{input_place}'
    answer = requests.get(url)

    if answer.status_code == 200:
        temp_list = parse_today_temp(url)
        await message.reply(f'–°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {parse_avarage_today_temp(url)}\n\n'
                            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temp_list[0][0]}\n'
                            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temp_list[1][0]}\n'
                            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temp_list[2][0]}\n'
                            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temp_list[3][0]}\n\n'
                            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤: {parse_avarage_precipitation_probability(url)}%')
    else:
        await message.reply('–ú—ñ—Å—Ç–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.message_handler(commands=['currency'])
async def currency(message: types.Message):
    await bot.send_message(message.chat.id, '–í—ñ–¥–∫—Ä–∏—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Çüíµ', reply_markup=currency_keyboard)


@dp.message_handler(Text(equals='–ö—É—Ä—Å –≤–∞–ª—é—Ç'))
async def exchange_rate(message: types.Message):
    await message.answer(f'<b><i>–ö–£–ü–Ü–í–õ–Ø / –ü–†–û–î–ê–ñ</i></b>\n'
                         f'<code>'
                         f'1 –≥—Ä–∏–≤–Ω—è = {find_dollars_buy_in_hryvnias()} / {find_dollars_sale_in_hryvnias()} –¥–æ–ª–∞—Ä–∞\n'
                         f'1 –≥—Ä–∏–≤–Ω—è = {find_euros_buy_in_hryvnias()} / {find_euros_sale_in_hryvnias()} —î–≤—Ä–æ\n'
                         f'1 —î–≤—Ä–æ   = {find_dollars_buy_in_euros()} / {find_dollars_sale_in_euros()} –¥–æ–ª–∞—Ä–∞\n'
                         f'1 —î–≤—Ä–æ   = {find_hryvnias_buy_in_euros()} / {find_hryvnias_sale_in_euros()} –≥—Ä–∏–≤–µ–Ω—å\n'
                         f'1 –¥–æ–ª–∞—Ä  = {find_euros_buy_in_dollars()} / {find_euros_sale_in_dollars()} —î–≤—Ä–æ\n'
                         f'1 –¥–æ–ª–∞—Ä  = {find_hryvnias_buy_in_dollars()} / {find_hryvnias_sale_in_dollars()} –≥—Ä–∏–≤–µ–Ω—å'
                         f'</code>', parse_mode='HTML')
    await message.delete()


@dp.message_handler(Text(equals='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è'))
async def converter(message: types.Message):
    await bot.send_message(message.chat.id, '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç', reply_markup=converter_keyboard)
    await message.delete()


@dp.message_handler(Text(equals='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–æ–ª–∞—Ä–∞'))
async def convert_dollar(message: types.Message):
    await ConverterForm.dollar.set()
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å $ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ —î–≤—Ä–æ —Ç–∞ –≥—Ä–∏–≤–Ω—ñ...')


@dp.message_handler(state=ConverterForm.dollar)
async def process_dollar(message: types.Message, state: FSMContext):
    input_data = message.text

    try:
        answer = float(input_data)
        await message.reply(f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∞—Ä—ñ–≤ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
                            f'{format(answer / float(find_dollars_buy_in_hryvnias()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –¥–æ–ª–∞—Ä—ñ–≤ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
                            f'{format(answer / float(find_dollars_sale_in_hryvnias()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∞—Ä—ñ–≤ –≤ —î–≤—Ä–æ: '
                            f'{format(answer / float(find_dollars_buy_in_euros()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –¥–æ–ª–∞—Ä—ñ–≤ –≤ —î–≤—Ä–æ: '
                            f'{format(answer / float(find_dollars_sale_in_euros()), ".4f")}\n')
    except:
        await message.reply('–ß–∏—Å–ª–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.message_handler(Text(equals='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —î–≤—Ä–æ'))
async def convert_euro(message: types.Message):
    await ConverterForm.euro.set()
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚Ç¨ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ –¥–æ–ª–∞—Ä–∏ —Ç–∞ –≥—Ä–∏–≤–Ω—ñ...')


@dp.message_handler(state=ConverterForm.euro)
async def process_euro(message: types.Message, state: FSMContext):
    input_data = message.text

    try:
        answer = float(input_data)
        await message.reply(f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —î–≤—Ä–æ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
                            f'{format(answer / float(find_euros_buy_in_hryvnias()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ —î–≤—Ä–æ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
                            f'{format(answer / float(find_euros_sale_in_hryvnias()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —î–≤—Ä–æ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
                            f'{format(answer / float(find_euros_buy_in_dollars()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ —î–≤—Ä–æ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
                            f'{format(answer / float(find_euros_sale_in_dollars()), ".4f")}\n')
    except:
        await message.reply('–ß–∏—Å–ª–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.message_handler(Text(equals='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≥—Ä–∏–≤–Ω—ñ'))
async def convert_hryvnia(message: types.Message):
    await ConverterForm.hryvnia.set()
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚Ç¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ –¥–æ–ª–∞—Ä–∏ —Ç–∞ —î–≤—Ä–æ...')


@dp.message_handler(state=ConverterForm.hryvnia)
async def process_hryvnia(message: types.Message, state: FSMContext):
    input_data = message.text

    try:
        answer = float(input_data)
        await message.reply(f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –≥—Ä–∏–≤–Ω—ñ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
                            f'{format(answer / float(find_hryvnias_buy_in_dollars()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –≥—Ä–∏–≤–Ω—ñ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
                            f'{format(answer / float(find_hryvnias_sale_in_dollars()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –≥—Ä–∏–≤–Ω—ñ –≤ —î–≤—Ä–æ: '
                            f'{format(answer / float(find_hryvnias_buy_in_euros()), ".4f")}\n'
                            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –≥—Ä–∏–≤–Ω—ñ –≤ —î–≤—Ä–æ: '
                            f'{format(answer / float(find_hryvnias_sale_in_euros()), ".4f")}\n')
    except:
        await message.reply('–ß–∏—Å–ª–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.message_handler(Text(equals='–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é'))
async def back_to_main_menu(message: types.Message):
    await bot.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞...', reply_markup=currency_keyboard)
    await message.delete()


@dp.message_handler(Text(equals='–ó–∞–∫—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É'))
async def close_keyboard(message: types.Message):
    await bot.send_message(message.chat.id, '–ó–∞–∫—Ä–∏—Ç—Ç—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏...', reply_markup=ReplyKeyboardRemove())
    await message.delete()


@dp.message_handler(content_types=ContentType.PHOTO, regexp='–º–µ–º|mem')
async def create_mem(message: types.Message):
    await message.photo[-1].download('img/test.jpg')
    print('Photo downloaded...')
    create_meme.create_meme()
    photo = InputFile('img/result.jpg')
    await bot.send_photo(message.chat.id, photo=photo)


@dp.message_handler(content_types=ContentType.VOICE)
async def create_mem(message: types.Message):
    voice = InputFile(f'voice/{choice(os.listdir("voice"))}')

    if randint(0, 5) == 3:
        print('Voice message are sending...')
        await message.reply_voice(voice=voice)


@dp.message_handler(regexp='location|–º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è')
async def bot_location(message: types.Message):
    await bot.send_location(message.chat.id, latitude=49.924394, longitude=27.746868)


@dp.message_handler(regexp='–∞–Ω—ñ–º–µ|–±–µ—Ä—Å—î—Ä–∫|–±—î—Ä—Å—î—Ä–∫|–±–µ—Ä—Å–µ—Ä–∫')
async def mention_anime(message: types.Message):
    await message.reply('–ê–ù–Ü–ú–ï - –ì–ê–í–ù–û!!!üí©üí©üí©')


@dp.message_handler(regexp='martyn|–º–∞—Ä—Ç–∏–Ω|–¥—Ç—Ä')
async def mention_bot(message: types.Message):
    data = extract_random_data.get_conversation_data()
    await message.reply(f'{extract_random_data.get_random_data(data)}')


@dp.message_handler(regexp='—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ|—É–∫—Ä–∞—ó–Ω—ñ —Å–ª–∞–≤–∞')
async def mention_glory(message: types.Message):
    await message.reply('–ì–ï–†–û–Ø–ú –°–õ–ê–í–ê!!!')


@dp.message_handler(regexp='—Å–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó')
async def mention_nation(message: types.Message):
    await message.reply('–°–ú–ï–†–¢–¨ –í–û–†–û–ì–ê–ú!!!')


@dp.message_handler(regexp='–£–∫—Ä–∞—ó–Ω–∞')
async def mention_ukraine(message: types.Message):
    await message.reply('–ü–û–ù–ê–î –£–°–ï!!!')


@dp.message_handler(regexp='–ø—É—Ç—ñ–Ω|–ø–∏–Ω—è|—Ä—î–∑—ñ–Ω–æ–≤–∞—è –ø–æ–ø–∞|—Ä—î–∑—ñ–Ω–∞–≤–∞—è –ø–æ–ø–∞|–ø—É—Ç—è|–ø–∏–Ω—å–∫–∞|putin')
async def mention_putin(message: types.Message):
    await message.reply('–•–£–ô–õ–û!!!')


@dp.message_handler(regexp='sophie|sofiia|sofi|—Å–æ—Ñ—ñ|—Å–æ—Ñ–∏')
async def call_sofi(message: types.Message):
    for i in range(0, 5):
        user_id = 639092726
        user_name = 'SOFI'
        mention = '[' + user_name + '](tg://user?id=' + str(user_id) + ')'
        bot_msg = f'WAKE UP, {mention}!!!'
        await bot.send_message(message.chat.id, bot_msg, parse_mode='Markdown')


@dp.message_handler(regexp='bitcoin|–±—ñ—Ç–∫–æ—ñ–Ω|–±—ñ—Ç–æ–∫|–ø–æ —á–æ–º—É –º–æ–Ω—î—Ç–∞|—à–æ –∑ –º–æ–Ω—î—Ç–æ—é|–ø–æ —á–æ–º—É –º–æ–Ω–µ—Ç–∞|—à–æ –∑ –º–æ–Ω–µ—Ç–æ—é')
async def bitcoin_price(message: types.Message):
    await message.reply(f'<b>–í–∞—Ä—Ç—ñ—Å—Ç—å Bitcoin –∑–∞—Ä–∞–∑.</b>\n\n'
                        f'–ö—É–ø—ñ–≤–ª—è: <span class="tg-spoiler">{bitcoin_buy()} $</span>\n'
                        f'–ü—Ä–æ–¥–∞–∂: <span class="tg-spoiler">{bitcoin_sale()} $</span>', parse_mode='HTML')


@dp.message_handler(content_types=ContentType.TEXT)
async def call_sofi_again(message: types.Message):
    answer_probability = randint(1, 10)
    print(answer_probability)

    if answer_probability == 1:
        user_id = 639092726
        user_name = '–°–æ—Ñ—ñ'
        mention = '[' + user_name + '](tg://user?id=' + str(user_id) + ')'

        bot_msg = [
            f'–°–ª—É—É—É—É—Ö–∞–π...–ø–æ—Ä–∞ –±–∏ –ø—ñ–¥–∫–∞—á–∞—Ç–∏—Å—å, {mention}!!!',
            f'–ö–∞—á–∞–ª–∫–∞ —Ü–µ –¥–æ–±—Ä–µ, {mention}!!!',
            f'–ô–¥–∏ –∫–∞—á–∞–π –±–∞–Ω–∫–∏, {mention}!!!',
            f'–Ø –± –Ω–∞ —Ç–≤–æ–º—É –º—ñ—Å—Ü—ñ –ø—ñ–¥–∫–∞—á–∞–≤—Å—è, {mention}.',
            f'–ù–µ —Ö–æ—á–µ—à –ø–æ–∫–∞—á–∞—Ç–∏—Å—å —Ç—Ä–æ—Ö–∏, {mention}???',
            f'–Ø –Ω–µ –º–æ–∂—É –∫–∞—á–∞—Ç–∏—Å—å, –±–æ —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∞–ª–µ —Ç–∏ –º–æ–∂–µ. –ü–æ—Ä–∞, {mention}!!!'
        ]

        await bot.send_message(message.chat.id, choice(bot_msg), parse_mode='Markdown')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
