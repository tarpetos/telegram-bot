import random
import time
import extract_random_data
import create_meme

from aiogram.types import InputFile
from config import API_TOKEN
from datetime import date
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

COMMANDS_LIST = """
/start - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
/random - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞
/eugene - –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
/id - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
/time - –¥–∞—Ç–∞, –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Ç–∞ —ñ–Ω—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Å—Ç–æ—Å–æ–≤–Ω–æ —á–∞—Å—É
/sticker - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ç—ñ–∫–µ—Ä
/currency - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer('–Ø - –ë–û–°!!!üòé')
    await message.delete()


@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    await message.reply(text=COMMANDS_LIST)


@dp.message_handler(commands=['random'])
async def send_welcome(message: types.Message):
    random_number = random.randint(-1000000, 1000000)
    await message.reply(f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: {random_number}üé≤')


@dp.message_handler(commands=['eugene'])
async def mark_eugene(message: types.Message):
    await message.reply('–ö–æ–º–∞–Ω–¥–∞ "eugene" —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î.ü§∑‚Äç')


@dp.message_handler(commands=['id'])
async def alarm(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup()
    user_id_btn = types.InlineKeyboardButton('ID', callback_data='user_id')
    keyboard_markup.row(user_id_btn)

    if message.from_user.username is not None:
        message.from_user.username = f'<code>{message.from_user.username}‚Äç</code>'
    else:
        message.from_user.username = f'<span class="tg-spoiler"><b><i>–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î —ñ–º–µ–Ω—ñü§∑</i></b></span>'

    await message.answer(f'–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {message.from_user.username}\n'
                         f'URL: {message.from_user.url}\n\n'
                         '–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤—ñ–π ID...', parse_mode='HTML', reply_markup=keyboard_markup)


@dp.callback_query_handler(text='user_id')
async def user_id_inline_callback(callback_query: types.CallbackQuery):
    await callback_query.answer(f"–í–∞—à ID: {callback_query.from_user.id}", True)


@dp.message_handler(commands=['time'])
async def search_time(message: types.Message):
    delta = date(time.localtime().tm_year, time.localtime().tm_mon, time.localtime().tm_mday) - date(2022, 2, 23)
    days_of_unity = date(time.localtime().tm_year, time.localtime().tm_mon, time.localtime().tm_mday) - date(1919, 1,
                                                                                                             21)

    await message.reply(
        f'–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞:\t{datetime.now().strftime("%d.%m.%Y")}üìÖ\n'
        f'–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:\t{datetime.now().strftime("%H:%M:%S")}üïî\n'
        f'–î–µ–Ω—å —Ç–∏–∂–Ω—è:\t{datetime.now().strftime("%A")}\n'
        f'–î–µ–Ω—å —Ä–æ–∫—É:\t{time.localtime().tm_yday}üåû\n'
        f'–ö-—Å—Ç—å –¥–Ω—ñ–≤ –∑ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è:\t{delta.days}üïä\n'
        f'–î–Ω—ñ–≤ –°–æ–±–æ—Ä–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏:\t{days_of_unity.days}ü§ù'
    )

    anniversary = time.localtime().tm_year - 1919

    if time.localtime().tm_mon == 1 and time.localtime().tm_mday == 22:
        await message.answer(f'–£–†–ê–ê–ê–ê, {anniversary} –†–Ü–ß–ù–ò–¶–Ø –°–û–ë–û–†–ù–û–°–¢–Ü –£–ö–†–ê–á–ù–ò')


@dp.message_handler(commands=['sticker'])
async def get_sticker(message: types.Message):
    data = extract_random_data.get_sticker()
    await bot.send_sticker(message.chat.id, sticker=f'{extract_random_data.get_random_sticker(data)}')
    await message.delete()


@dp.message_handler(commands=['currency'])
async def exchange_rate(message: types.Message):
    await bot.send_message(message.chat.id, '–¢—É—Ç –±—É–¥–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Çüíµ')


@dp.message_handler(regexp='sophie|sofiia|sofi|—Å–æ—Ñ—ñ|—Å–æ—Ñ–∏')
async def call_sofi(message: types.Message):
    for i in range(0, 5):
        user_id = 639092726
        user_name = 'SOFI'
        mention = '[' + user_name + '](tg://user?id=' + str(user_id) + ')'
        bot_msg = f'WAKE UP, {mention}!!!'
        await bot.send_message(message.chat.id, bot_msg, parse_mode='Markdown')


@dp.message_handler(regexp='location|–º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è')
async def bot_location(message: types.Message):
    await bot.send_location(message.chat.id, latitude=49.924394, longitude=27.746868)


@dp.message_handler(content_types=['photo'], regexp='–º–µ–º|mem')
async def create_mem(message: types.Message):
    await message.photo[-1].download('img/test.jpg')
    create_meme.create_meme()
    photo = InputFile("img/result.jpg")
    await bot.send_photo(message.chat.id, photo=photo)


@dp.message_handler(regexp='martyn|–º–∞—Ä—Ç–∏–Ω')
async def mention_bot(message: types.Message):
    data = extract_random_data.get_bullshit()
    await message.reply(f'{extract_random_data.get_random_data(data)}')


@dp.message_handler(regexp='–∞–Ω—ñ–º–µ|–±–µ—Ä—Å—î—Ä–∫|–±—î—Ä—Å—î—Ä–∫|–±–µ—Ä—Å–µ—Ä–∫')
async def mention_anime(message: types.Message):
    await message.reply('–ê–ù–Ü–ú–ï - –ì–ê–í–ù–û!!!üí©üí©üí©')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
