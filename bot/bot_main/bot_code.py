import os
import re
import time
from datetime import date, datetime
from random import randint, choice

import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import IsReplyFilter, Text
from aiogram.types import InputFile, ContentType, ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData

from bot import parse_link
from bot import currency_cost as cc
from bot.bot_main.bot_classes.ConverterForm import ConverterForm
from bot.bot_main.bot_classes.DaysToBirthday import DaysToBirthday
from bot.bot_main.bot_classes.WeatherInfo import WeatherInfo
from bot.bot_main.bot_classes.SearchTerm import SearchTerm
from bot.bot_main.config import API_TOKEN, COMMANDS_LIST
from bot.bot_main.for_mem_creation.create_meme import create_meme
from bot.bot_main.for_mem_creation.extract_random_data import get_sticker, get_conversation_data, get_random_data
from bot.keyboards import converter_keyboard, currency_keyboard, random_numbers_keyboard
from bot.parse_temprature import parse_temp_at_time, parse_avarage_precipitation_probability, \
    parse_minmax_temp, find_avarage_temp_between_two, avarage_day_temp

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer('–®–¢–£–ß–ù–ò–ô –Ü–ù–¢–ï–õ–ï–ö–¢ –î–¢–†-1')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(text=COMMANDS_LIST)


@dp.message_handler(commands=['random'])
async def randomize(message: types.Message):
    await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —á–∏—Å–ª–∞:', reply_markup=random_numbers_keyboard.random_number_keyboard)


@dp.callback_query_handler(text=['random_value_1', 'random_value_2', 'random_value_3', 'random_value_4'])
async def choose_random(call: types.CallbackQuery):
    if call.data == 'random_value_1':
        await call.message.answer(
            f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(0, 10)}</code> üé≤',
            parse_mode='HTML'
        )
    elif call.data == 'random_value_2':
        await call.message.answer(
            f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(0, 100)}</code> üé≤',
            parse_mode='HTML')
    elif call.data == 'random_value_3':
        await call.message.answer(
            f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(-100, 100)}</code> üé≤',
            parse_mode='HTML'
        )
    elif call.data == 'random_value_4':
        await call.message.answer(
            f'–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ: <code>{randint(-1000000, 1000000)}</code> üé≤',
            parse_mode='HTML'
        )

    await call.answer()


@dp.message_handler(commands=['currency'])
async def currency(message: types.Message):
    await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –º–µ–Ω—éüíµ:', reply_markup=currency_keyboard.currency_keyboard)


@dp.callback_query_handler(text=['currency_rate'])
async def exchange_rate(call: types.CallbackQuery):
    await call.message.answer(
        f'<b><i>–ö–£–ü–Ü–í–õ–Ø / –ü–†–û–î–ê–ñ</i></b>\n'
        f'<code>'
        f'1 –≥—Ä–∏–≤–Ω—è = {cc.find_dollars_buy_in_hryvnias():.4f} / {cc.find_dollars_sale_in_hryvnias():.4f} –¥–æ–ª–∞—Ä–∞\n'
        f'1 –≥—Ä–∏–≤–Ω—è = {cc.find_euros_buy_in_hryvnias():.4f} / {cc.find_euros_sale_in_hryvnias():.4f} —î–≤—Ä–æ\n'
        f'1 —î–≤—Ä–æ   = {cc.find_dollars_buy_in_euros():.4f} / {cc.find_dollars_sale_in_euros():.4f} –¥–æ–ª–∞—Ä–∞\n'
        f'1 —î–≤—Ä–æ   = {cc.find_hryvnias_buy_in_euros():.4f} / {cc.find_hryvnias_sale_in_euros():.4f} –≥—Ä–∏–≤–µ–Ω—å\n'
        f'1 –¥–æ–ª–∞—Ä  = {cc.find_euros_buy_in_dollars():.4f} / {cc.find_euros_sale_in_dollars():.4f} —î–≤—Ä–æ\n'
        f'1 –¥–æ–ª–∞—Ä  = {cc.find_hryvnias_buy_in_dollars():.4f} / {cc.find_hryvnias_sale_in_dollars():.4f} –≥—Ä–∏–≤–µ–Ω—å'
        f'</code>', parse_mode='HTML', reply_markup=ReplyKeyboardRemove()
    )
    await call.answer()


@dp.callback_query_handler(text=['currency_converter'])
async def converter(call: types.CallbackQuery):
    await call.message.answer('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:', reply_markup=converter_keyboard.converter_keyboard)
    await call.message.delete()
    await call.answer()


@dp.callback_query_handler(text=['convert_dollar'])
async def convert_dollar(call: types.CallbackQuery):
    await ConverterForm.dollar.set()
    await call.message.answer('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å $ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ —î–≤—Ä–æ —Ç–∞ –≥—Ä–∏–≤–Ω—ñ...')
    await call.answer()


@dp.message_handler(state=ConverterForm.dollar)
async def process_dollar(message: types.Message, state: FSMContext):
    input_data = message.text

    try:
        answer = float(input_data)

        await message.answer(
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∞—Ä—ñ–≤ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
            f'{answer / cc.find_dollars_buy_in_hryvnias():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –¥–æ–ª–∞—Ä—ñ–≤ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
            f'{answer / cc.find_dollars_sale_in_hryvnias():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∞—Ä—ñ–≤ –≤ —î–≤—Ä–æ: '
            f'{answer / cc.find_dollars_buy_in_euros():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –¥–æ–ª–∞—Ä—ñ–≤ –≤ —î–≤—Ä–æ: '
            f'{answer / cc.find_dollars_sale_in_euros():.4f}\n'
        )
    except ValueError:
        await message.answer('–ß–∏—Å–ª–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.callback_query_handler(text=['convert_euro'])
async def convert_euro(call: types.CallbackQuery):
    await ConverterForm.euro.set()
    await call.message.answer('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚Ç¨ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ –¥–æ–ª–∞—Ä–∏ —Ç–∞ –≥—Ä–∏–≤–Ω—ñ...')
    await call.answer()


@dp.message_handler(state=ConverterForm.euro)
async def process_euro(message: types.Message, state: FSMContext):
    input_data = message.text

    try:
        answer = float(input_data)
        await message.answer(
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —î–≤—Ä–æ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
            f'{answer / cc.find_euros_buy_in_hryvnias():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ —î–≤—Ä–æ –≤ –≥—Ä–∏–≤–Ω—è—Ö: '
            f'{answer / cc.find_euros_sale_in_hryvnias():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —î–≤—Ä–æ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
            f'{answer / cc.find_euros_buy_in_dollars():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ —î–≤—Ä–æ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
            f'{answer / cc.find_euros_sale_in_dollars():.4f}\n'
        )
    except ValueError:
        await message.answer('–ß–∏—Å–ª–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.callback_query_handler(text=['convert_hryvnia'])
async def convert_hryvnia(call: types.CallbackQuery):
    await ConverterForm.hryvnia.set()
    await call.message.answer('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚Ç¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ –¥–æ–ª–∞—Ä–∏ —Ç–∞ —î–≤—Ä–æ...')
    await call.answer()


@dp.message_handler(state=ConverterForm.hryvnia)
async def process_hryvnia(message: types.Message, state: FSMContext):
    input_data = message.text

    try:
        answer = float(input_data)
        await message.reply(
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –≥—Ä–∏–≤–Ω—ñ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
            f'{answer / cc.find_hryvnias_buy_in_dollars():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –≥—Ä–∏–≤–Ω—ñ –≤ –¥–æ–ª–∞—Ä–∞—Ö: '
            f'{answer / cc.find_hryvnias_sale_in_dollars():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –≥—Ä–∏–≤–Ω—ñ –≤ —î–≤—Ä–æ: '
            f'{answer / cc.find_hryvnias_buy_in_euros():.4f}\n'
            f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –≥—Ä–∏–≤–Ω—ñ –≤ —î–≤—Ä–æ: '
            f'{answer / cc.find_hryvnias_sale_in_euros():.4f}\n'
        )
    except ValueError:
        await message.answer('–ß–∏—Å–ª–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.callback_query_handler(text=['back_to_menu'])
async def back_to_main_menu(call: types.CallbackQuery):
    await call.message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –º–µ–Ω—éüíµ:', reply_markup=currency_keyboard.currency_keyboard)
    await call.message.delete()
    await call.answer()


@dp.message_handler(commands=['id'])
async def alarm(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup()
    user_id_btn = types.InlineKeyboardButton('ID', callback_data='user_id')
    keyboard_markup.row(user_id_btn)

    if message.from_user.username is not None:
        message.from_user.username = f'<code>{message.from_user.username}</code>'
    else:
        message.from_user.username = f'<span class="tg-spoiler"><b><i>–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î —ñ–º–µ–Ω—ñü§∑</i></b></span>'

    await message.answer(
        f'–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {message.from_user.username}\n'
        f'URL: {message.from_user.url}\n\n'
        '–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤—ñ–π ID...', parse_mode='HTML', reply_markup=keyboard_markup
    )

    await message.delete()


@dp.callback_query_handler(text='user_id')
async def user_id_inline_callback(callback_query: types.CallbackQuery):
    await callback_query.answer(f'–í–∞—à ID: {callback_query.from_user.id}', True)


@dp.message_handler(commands=['time'])
async def search_time(message: types.Message):
    current_year = time.localtime().tm_year
    current_month = time.localtime().tm_mon
    current_day = time.localtime().tm_mday

    delta = date(current_year, current_month, current_day) - date(current_year, 2, 23)
    days_of_unity = date(current_year, current_month, current_day) - date(1919, 1, 21)

    await message.reply(
        f'–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞:\t{datetime.now().strftime("%d.%m.%Y")}üìÖ\n'
        f'–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:\t{datetime.now().strftime("%H:%M:%S")}üïî\n'
        f'–î–µ–Ω—å —Ç–∏–∂–Ω—è:\t{datetime.now().strftime("%A")}\n'
        f'–î–µ–Ω—å —Ä–æ–∫—É:\t{time.localtime().tm_yday}üåû\n'
        f'–ö-—Å—Ç—å –¥–Ω—ñ–≤ –∑ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è:\t{delta.days}üïä\n'
        f'–î–Ω—ñ–≤ –°–æ–±–æ—Ä–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏:\t{days_of_unity.days}ü§ù'
    )

    anniversary = time.localtime().tm_year - 1919

    if time.localtime().tm_mon == 1 and time.localtime().tm_mday == 22:
        await message.answer(f'–£–†–ê–ê–ê–ê, {anniversary} –†–Ü–ß–ù–ò–¶–Ø –°–û–ë–û–†–ù–û–°–¢–Ü –£–ö–†–ê–á–ù–ò')


@dp.message_handler(commands=['birthday'])
async def get_birthday(message: types.Message):
    await DaysToBirthday.day_month.set()
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–∞–±–æ —ñ–Ω—à—É –¥–∞—Ç—É) –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä...')


@dp.message_handler(state=DaysToBirthday.day_month)
async def process_birthday(message: types.Message, state: FSMContext):
    input_data = message.text
    input_data = input_data.split('.', 2)
    current_year = time.localtime().tm_year
    current_month = time.localtime().tm_mon
    current_day = time.localtime().tm_mday

    try:
        answer = abs(
            date(current_year, current_month, current_day) -
            date(int(input_data[2]), int(input_data[1]), int(input_data[0]))
        )

        await message.reply(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º—ñ–∂ –¥–∞—Ç–∞–º–∏: {answer.days}')
    except ValueError:
        await message.reply('–î–∞—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.message_handler(commands=['sticker'])
async def choose_sticker(message: types.Message):
    data = get_sticker()
    await bot.send_sticker(message.chat.id, sticker=f'{get_random_data(data)}')
    await message.delete()


@dp.message_handler(commands=['weather'])
async def weather(message: types.Message):
    await WeatherInfo.place.set()
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞...')


@dp.message_handler(state=WeatherInfo.place)
async def process_weather(message: types.Message, state: FSMContext):
    input_place = message.text

    url = f'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-{input_place}'
    answer = requests.get(url)

    if answer.status_code == 200:
        temp_list = find_avarage_temp_between_two(url)
        await message.reply(
            f'{parse_temp_at_time(url)}\n\n'
            f'{parse_minmax_temp(url)}'
            f'{avarage_day_temp(url)}'
            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temp_list[0]}\n'
            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temp_list[1]}\n'
            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temp_list[2]}\n'
            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temp_list[3]}\n\n'
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤: {parse_avarage_precipitation_probability(url)}%'
        )
    else:
        await message.reply('–ú—ñ—Å—Ç–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ.')

    await state.finish()


@dp.message_handler(regexp=re.compile('^/eugene$|^/eugene@TarpetosBOT$'))
async def parse_links(message: types.Message):
    await SearchTerm.search_term.set()
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–µ–æ...')


@dp.message_handler(state=SearchTerm.search_term)
async def process_links(message: types.Message, state: FSMContext):
    input_data = message.text

    print(input_data)
    try:
        answer = parse_link.links_split(input_data)

        result = ''
        for i in range(0, 5):
            result += f'{answer[i]}\n'

        await message.reply(f'{result}')
    except ValueError:
        await message.answer('–ü–æ –∑–∞–¥–∞–Ω–æ–º—É –∑–∞–ø–∏—Ç—É –Ω–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.')

    await state.finish()


@dp.message_handler(regexp='–∑–¥–æ—Ä–æ–≤ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –∑–¥–æ—Ä–æ–≤|–º–∞—Ä—Ç–∏–Ω–∫–æ –∑–¥–æ—Ä–æ–≤|–ø—Ä–∏–≤—ñ—Ç –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –ø—Ä–∏–≤—ñ—Ç|–º–∞—Ä—Ç–∏–Ω–∫–æ –ø—Ä–∏–≤—ñ—Ç')
async def reply_on_hello(message: types.Message):
    answer_list = [
        '–ó–¥–æ—Ä–æ–≤',
        '–ü—Ä–∏–≤—ñ—Ç',
        '–•–∞–π',
        '–ö—É',
        'Hello',
        '–ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫—ñ –±—É–ª–∏',
    ]
    await message.reply(choice(answer_list))


@dp.message_handler(regexp='–ø–æ–∫–∞ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –ø–æ–∫–∞|–º–∞—Ä—Ç–∏–Ω–∫–æ –ø–æ–∫–∞|–±—É–≤–∞–π –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –±—É–≤–∞–π|–º–∞—Ä—Ç–∏–Ω–∫–æ –±—É–≤–∞–π')
async def reply_on_goodbuy(message: types.Message):
    answer_list = [
        '–ü–æ–∫–∞',
        '–ë—É–≤–∞–π',
        '–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è',
        '–ë—É–¥—å –∑–¥–æ—Ä–æ–≤',
        '–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ',
        '–ù–∞–¥—ñ—é—Å—å –º–∏ –±—ñ–ª—å—à–µ –Ω–µ –∑—É—Å—Ç—Ä—ñ–Ω–µ–º–æ—Å—å',
    ]
    await message.reply(choice(answer_list))


@dp.message_handler(regexp='—è–∫ —Å–ø—Ä–∞–≤–∏ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω —è–∫ —Å–ø—Ä–∞–≤–∏|–º–∞—Ä—Ç–∏–Ω–∫–æ —è–∫ —Å–ø—Ä–∞–≤–∏|—è–∫ –¥—ñ–ª–∞ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω —è–∫ '
                           '–¥—ñ–ª–∞|–º–∞—Ä—Ç–∏–Ω–∫–æ —è–∫ –¥—ñ–ª–∞')
async def reply_on_goodbuy(message: types.Message):
    answer_list = [
        '–î–æ–±—Ä–µ',
        '–ù–æ—Ä–º',
        '–ê —à–æ?',
        '–¢–æ–±—ñ —è–∫–µ –¥—ñ–ª–æ?',
        '–¢–∞–∫ —Å–æ–±—ñ',
        '–ù–µ–ø–æ–≥–∞–Ω–æ',
    ]
    await message.reply(choice(answer_list))


@dp.message_handler(regexp='—Å—Ç—Ä—î–º–æ—É—Å|—Å–ø—î—Ä–º–æ—É—Å|—Å–ø–µ—Ä–º–æ—É—Å')
async def mention_putin(message: types.Message):
    answer_list = [
        '–ó–î–û–•. –ê–•–•–ê–•–ê–•–ê–•–êüéâüéâüéÇü•≥üéÇüéâüéâ\n–í–Ü–¢–ê–Ñ–ú–û –ô–û–ì–û!!!üëèüëèüëè',
        '–ê–ó–ê–ó–ê–ó. –ü–ê–í –î–ï–ë–Ü–õüòÉüòÉüòÉ',
        '–í –ì–†–û–ë –ù–ê–•–£–ô!!!‚ö∞‚ö∞‚ö∞',
        '–õ–ï–ñ–ê–ê–ê–¢–ò, –°–ü–Ñ–†–ú–û–£–°–û–í!!!ü§£',
        '–ü–û–ú–ï–†. –Ü–•–Ü–•–Ü–•–Ü–•.üòÑüòÑüòÑ',
    ]
    await message.reply(choice(answer_list))
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEGXHdja6q6_5j6cXxfhfhXehxhG9tk8AACcBAAAgNXCEkOW0xbCSyuCCsE')


@dp.message_handler(IsReplyFilter(True))
async def reply_on_reply(message: types.Message):
    if message.reply_to_message.from_user.id == bot.id:
        if len(message.text) > 3 and message.text.endswith('?'):
            answer_list = [
                '–ù–µ –∑–Ω–∞—é.',
                '–í –º–µ–Ω–µ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.',
                '–ô–º–æ–≤—ñ—Ä–Ω–æ, —â–æ —Ç–∞–∫.',
                '–¢–∞–∫.',
                '–ù—ñ.',
                '–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–µ.',
                '–¢–∏ –∑–∞–¥–∞—î—à —è–∫—ñ—Å—å –¥–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.',
                '–Ø –Ω–µ —Ö–æ—á—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ü–µ.',
                '–ë—ñ–ª—å—à—ñ—Å—Ç—å –∑–∞ –≤—Å–µ, —â–æ —Ç–∞–∫.',
                '–î–∞, —î—Ç–æ —Ç–∞–∫.',
                '–ù—ñ—á–æ',
                '–ù—ñ—á–æ, –∞ —à–æ.',
                '–ù—î, –∞ —à–æ.',
                '–°–∞–º —Ç–∞–∫–∏–π.',
                '–î–æ–±—Ä–µ',
                '–ó—Ä–æ–∑—É–º—ñ–≤',
                '–û–∫',
                '–Ø —Ö–∞—á—É –ø—ñ—Ç—Å–∏',
                '–ü—ñ—à–æ–≤ –Ω–∞—Ö—É–π',
                '–î–µ?',
                '–°–æ—Å–∏ —Ö—É—è',
            ]
            await message.reply(choice(answer_list))
        else:
            data = get_conversation_data()
            await message.reply(f'{get_random_data(data)}')


@dp.message_handler(content_types=ContentType.PHOTO, regexp='–º–µ–º|mem')
async def create_mem(message: types.Message):
    await message.photo[-1].download('img/test.jpg')
    print('Photo downloaded...')
    create_meme()
    photo = InputFile('img/result.jpg')
    print('Photo sending...')
    await bot.send_photo(message.chat.id, photo=photo)


@dp.message_handler(content_types=ContentType.VOICE)
async def voice_reply(message: types.Message):
    voice = InputFile(f'voice/{choice(os.listdir("voice"))}')

    print('Voice sending...')
    if randint(0, 5) == 3:
        print('Voice message are sending...')
        await message.reply_voice(voice=voice)


@dp.message_handler(content_types=ContentType.LEFT_CHAT_MEMBER)
async def say_goodbye(message: types.Message):
    await message.reply('–ü–æ–∫–∞üëã')


@dp.message_handler(content_types=ContentType.NEW_CHAT_MEMBERS)
async def say_hello(message: types.Message):
    await message.reply('–ó–¥–æ—Ä–æ–≤üëã')


@dp.message_handler(content_types=ContentType.NEW_CHAT_PHOTO)
async def new_chat_photo(message: types.Message):
    await message.reply('–û, –Ω–æ–≤–∞ —Ñ–æ—Ç–∫–∞ —á–∞—Ç—É!')


@dp.message_handler(content_types=ContentType.DELETE_CHAT_PHOTO)
async def delete_chat_photo(message: types.Message):
    await message.reply('–ó–Ω–µ—Å–ª–∏ —Ñ–æ—Ç–∫—É —á–∞—Ç—É. –Ü —à–æ –±—É–¥–µ –¥–∞–ª—ñ? –î–µ—Ä–∂–∞–≤–Ω–∏–π –ø–µ—Ä–µ–≤–æ—Ä—Ç?')


@dp.message_handler(content_types=ContentType.VIDEO)
async def react_to_video(message: types.Message):
    react_list = [
        '–ù—É –∫–∏–Ω—É–≤ –≤—ñ–¥–æ—Å. –ê —Ç–µ–ø–µ—Ä —Ä–æ–∑–∫–∞–∂–∏-–Ω–æ, —à–æ —Ç–∞–º. –Ø–∫–∏–π –∑–º—ñ—Å—Ç —ñ —Ç–µ–º–∞ –≤—ñ–¥–µ–æ?',
        '–®–æ –∑–∞ –≤—ñ–¥–æ—Å?',
        '–í—ñ–¥–æ—Å...—è—Å–Ω–æ',
        '–ù–µ —Ö–æ—á–µ—à —Ä–æ–∑–∫–∞–∑–∞—Ç–∏, —à–æ –≤ –≤—ñ–¥–æ—Å—ñ?',
    ]
    await message.reply(choice(react_list))


@dp.message_handler(content_types=ContentType.ANIMATION)
async def react_to_animation(message: types.Message):
    react_list = [
        '–®–æ —Ü–µ? –ì—ñ—Ñ–∫–∞? –Ø —Ç–∞–∫–µ –Ω–µ —á–∏—Ç–∞—é',
        '–ô–º–æ–≤—ñ—Ä–Ω–æ, –∫–æ–ª–∏—Å—å —Ç–≤–æ—Ä–µ—Ü—å –Ω–∞–≤—á–∏—Ç—å –º–µ–Ω–µ —Ä–æ–∑—É–º—ñ—Ç–∏ —Ü–µ',
        '–ù–µ –ª—é–±–ª—é —è —Ç–∞–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤.',
        '–ß–∏ –Ω–µ–º–∞ —Ç–∞–º –º–µ–º—É –≤–∏–ø–∞–¥–∫–æ–≤–æ?',
        '–ü—Ä–æ–ø–æ–Ω—É—é –≤–∏—Ä—ñ–∑–∞—Ç–∏ –∑ —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—ñ –∑ –ø—ñ–¥–ø–∏—Å–æ–º "–º–µ–º".',
    ]
    await message.reply(choice(react_list))


@dp.message_handler(content_types=ContentType.POLL)
async def react_to_poll(message: types.Message):
    await message.reply('–†–æ–∑–∫–∞–∂—ñ—Ç—å, –ø—Ä–æ —à–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ú–∞—Ä—Ç–∏–Ω—É')


@dp.message_handler(regexp='location|–º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è')
async def bot_location(message: types.Message):
    await bot.send_location(message.chat.id, latitude=49.924394, longitude=27.746868)


@dp.message_handler(regexp='–∞–Ω—ñ–º–µ|–±–µ—Ä—Å—î—Ä–∫|–±—î—Ä—Å—î—Ä–∫|–±–µ—Ä—Å–µ—Ä–∫|—á–µ–ª–æ–≤–µ–∫ –±–µ–Ω–∑–æ–ø–∏–ª–∞|—á—î–ª–æ–≤—î–∫ –±–µ–Ω–∑–æ–ø–∏–ª–∞')
async def mention_anime(message: types.Message):
    await message.reply('–ê–ù–Ü–ú–ï - –ì–ê–í–ù–û!!!üí©üí©üí©')


@dp.message_handler(regexp='martyn|–º–∞—Ä—Ç–∏–Ω|–¥—Ç—Ä')
async def mention_bot(message: types.Message):
    data = get_conversation_data()
    await message.reply(f'{get_random_data(data)}')


@dp.message_handler(regexp='—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ|—É–∫—Ä–∞—ó–Ω—ñ —Å–ª–∞–≤–∞')
async def mention_glory(message: types.Message):
    await message.reply('–ì–ï–†–û–Ø–ú –°–õ–ê–í–ê!!!')


@dp.message_handler(regexp='—Å–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó')
async def mention_nation(message: types.Message):
    await message.reply('–°–ú–ï–†–¢–¨ –í–û–†–û–ì–ê–ú!!!')


@dp.message_handler(regexp='–£–∫—Ä–∞—ó–Ω–∞')
async def mention_ukraine(message: types.Message):
    await message.reply('–ü–û–ù–ê–î –£–°–ï!!!')


@dp.message_handler(regexp='–ø—É—Ç—ñ–Ω|–ø–∏–Ω—è|—Ä—î–∑—ñ–Ω–æ–≤–∞—è –ø–æ–ø–∞|—Ä—î–∑—ñ–Ω–∞–≤–∞—è –ø–æ–ø–∞|–ø—É—Ç—è|–ø–∏–Ω—å–∫–∞|putin')
async def mention_putin(message: types.Message):
    await message.reply('–•–£–ô–õ–û!!!')


@dp.message_handler(regexp='–±—Ä–∞–≤–ª|brawl')
async def mention_putin(message: types.Message):
    await message.reply('–ë–†–ê–í–õ–Ü–ö - –•–£–Ø–í–õ–Ü–ö')


@dp.message_handler(regexp='sophie|sofiia|sofi|—Å–æ—Ñ—ñ|—Å–æ—Ñ–∏')
async def call_sofi(message: types.Message):
    for i in range(0, 5):
        user_id = 639092726
        user_name = 'SOFI'
        mention = '[' + user_name + '](tg://user?id=' + str(user_id) + ')'
        bot_msg = f'WAKE UP, {mention}!!!'
        await bot.send_message(message.chat.id, bot_msg, parse_mode='Markdown')


@dp.message_handler(regexp='bitcoin|–±—ñ—Ç–∫–æ—ñ–Ω|–±—ñ—Ç–æ–∫|–ø–æ —á–æ–º—É –º–æ–Ω—î—Ç–∞|—à–æ –∑ –º–æ–Ω—î—Ç–æ—é|–ø–æ —á–æ–º—É –º–æ–Ω–µ—Ç–∞|—à–æ –∑ –º–æ–Ω–µ—Ç–æ—é')
async def bitcoin_price(message: types.Message):
    await message.reply(
        f'<b>–í–∞—Ä—Ç—ñ—Å—Ç—å Bitcoin –∑–∞—Ä–∞–∑.</b>\n\n'
        f'–ö—É–ø—ñ–≤–ª—è: <span class="tg-spoiler">{cc.bitcoin_buy()} $</span>\n'
        f'–ü—Ä–æ–¥–∞–∂: <span class="tg-spoiler">{cc.bitcoin_sale()} $</span>', parse_mode='HTML'
    )


@dp.message_handler(content_types=ContentType.TEXT)
async def call_sofi_again(message: types.Message):
    answer_probability = randint(1, 50)

    if answer_probability == 1:
        user_id = 639092726
        user_name = '–°–æ—Ñ—ñ'
        mention = '[' + user_name + '](tg://user?id=' + str(user_id) + ')'

        bot_msg = [
            f'–°–ª—É—É—É—É—Ö–∞–π...–ø–æ—Ä–∞ –±–∏ –ø—ñ–¥–∫–∞—á–∞—Ç–∏—Å—å, {mention}!!!',
            f'–ö–∞—á–∞–ª–∫–∞ —Ü–µ –¥–æ–±—Ä–µ, {mention}!!!',
            f'–ô–¥–∏ –∫–∞—á–∞–π –±–∞–Ω–∫–∏, {mention}!!!',
            f'–Ø –± –Ω–∞ —Ç–≤–æ–º—É –º—ñ—Å—Ü—ñ –ø—ñ–¥–∫–∞—á–∞–≤—Å—è, {mention}.',
            f'–ù–µ —Ö–æ—á–µ—à –ø–æ–∫–∞—á–∞—Ç–∏—Å—å —Ç—Ä–æ—Ö–∏, {mention}???',
            f'–Ø –Ω–µ –º–æ–∂—É –∫–∞—á–∞—Ç–∏—Å—å, –±–æ —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∞–ª–µ —Ç–∏ –º–æ–∂–µ. –ü–æ—Ä–∞, {mention}!!!'
        ]

        await bot.send_message(message.chat.id, choice(bot_msg), parse_mode='Markdown')

    await check_bot_usage(message)


@dp.message_handler(content_types=ContentType.ANY)
async def check_bot_usage(message: types.Message):
    print('Message chat id:', message.chat.id)
    print('Bot id:', message.bot.id)
    print('From what id message:', message.from_id)
    print('Message id:', message.message_id, '\n')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
