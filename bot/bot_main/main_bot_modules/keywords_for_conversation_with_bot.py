from random import choice, randint

from aiogram import types
from aiogram.dispatcher.filters import IsReplyFilter
from aiogram.types import ContentType

from bot.bot_main import main_objects_initialization
from bot.bot_main.for_mem_creation.extract_random_data import get_random_data
from bot.bot_main.main_objects_initialization import dp, bot


@dp.message_handler(regexp='–∑–¥–æ—Ä–æ–≤ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –∑–¥–æ—Ä–æ–≤|–º–∞—Ä—Ç–∏–Ω–∫–æ –∑–¥–æ—Ä–æ–≤|–ø—Ä–∏–≤—ñ—Ç –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –ø—Ä–∏–≤—ñ—Ç|–º–∞—Ä—Ç–∏–Ω–∫–æ –ø—Ä–∏–≤—ñ—Ç')
async def reply_on_hello(message: types.Message):
    answer_list = [
        '–ó–¥–æ—Ä–æ–≤',
        '–ü—Ä–∏–≤—ñ—Ç',
        '–•–∞–π',
        '–ö—É',
        'Hello',
        '–ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫—ñ –±—É–ª–∏',
    ]
    await message.reply(choice(answer_list))


@dp.message_handler(regexp='–ø–æ–∫–∞ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –ø–æ–∫–∞|–º–∞—Ä—Ç–∏–Ω–∫–æ –ø–æ–∫–∞|–±—É–≤–∞–π –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω –±—É–≤–∞–π|–º–∞—Ä—Ç–∏–Ω–∫–æ –±—É–≤–∞–π')
async def reply_on_goodbye(message: types.Message):
    answer_list = [
        '–ü–æ–∫–∞',
        '–ë—É–≤–∞–π',
        '–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è',
        '–ë—É–¥—å –∑–¥–æ—Ä–æ–≤',
        '–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ',
        '–ù–∞–¥—ñ—é—Å—å –º–∏ –±—ñ–ª—å—à–µ –Ω–µ –∑—É—Å—Ç—Ä—ñ–Ω–µ–º–æ—Å—å',
    ]
    await message.reply(choice(answer_list))


@dp.message_handler(
    regexp='—è–∫ —Å–ø—Ä–∞–≤–∏ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω —è–∫ —Å–ø—Ä–∞–≤–∏|–º–∞—Ä—Ç–∏–Ω–∫–æ —è–∫ —Å–ø—Ä–∞–≤–∏|—è–∫ –¥—ñ–ª–∞ –º–∞—Ä—Ç–∏–Ω|–º–∞—Ä—Ç–∏–Ω —è–∫ –¥—ñ–ª–∞|–º–∞—Ä—Ç–∏–Ω–∫–æ —è–∫ –¥—ñ–ª–∞'
)
async def reply_on_how_are_you(message: types.Message):
    answer_list = [
        '–î–æ–±—Ä–µ',
        '–ù–æ—Ä–º',
        '–ê —à–æ?',
        '–¢–æ–±—ñ —è–∫–µ –¥—ñ–ª–æ?',
        '–¢–∞–∫ —Å–æ–±—ñ',
        '–ù–µ–ø–æ–≥–∞–Ω–æ',
    ]
    await message.reply(choice(answer_list))


@dp.message_handler(regexp='—Å—Ç—Ä—î–º–æ—É—Å|—Å–ø—î—Ä–º–æ—É—Å|—Å–ø–µ—Ä–º–æ—É—Å')
async def mention_spermous(message: types.Message):
    answer_list = [
        '–ó–î–û–•. –ê–•–•–ê–•–ê–•–ê–•–êüéâüéâüéÇü•≥üéÇüéâüéâ\n–í–Ü–¢–ê–Ñ–ú–û –ô–û–ì–û!!!üëèüëèüëè',
        '–ê–ó–ê–ó–ê–ó. –ü–ê–í –î–ï–ë–Ü–õüòÉüòÉüòÉ',
        '–í –ì–†–û–ë –ù–ê–•–£–ô!!!‚ö∞‚ö∞‚ö∞',
        '–õ–ï–ñ–ê–ê–ê–¢–ò, –°–ü–Ñ–†–ú–û–£–°–û–í!!!ü§£',
        '–ü–û–ú–ï–†. –Ü–•–Ü–•–Ü–•–Ü–•.üòÑüòÑüòÑ',
    ]
    await message.reply(choice(answer_list))
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEGXHdja6q6_5j6cXxfhfhXehxhG9tk8AACcBAAAgNXCEkOW0xbCSyuCCsE')


@dp.message_handler(IsReplyFilter(True))
async def reply_on_reply(message: types.Message):
    if message.reply_to_message.from_user.id == bot.id:
        if message.text.endswith('–π–¥–∏ –Ω–∞—Ö—É–π') or message.text.endswith('–ø—ñ—à–æ–≤ –Ω–∞—Ö—É–π') or \
                message.text.endswith('—ñ–¥–∏ –Ω–∞—Ö—É–π') or message.text.endswith('–Ω–∞—Ö—É–π –ø—ñ—à–æ–≤') or \
                message.text.endswith('–Ω–∞—Ö—É–π —ñ–¥–∏') or message.text.endswith('–Ω–∞—Ö—É–π –π–¥–∏'):

            answer_list = [
                '—Å–∞–º –π–¥–∏ –Ω–∞—Ö—É–π',
                '—Ç–∏ –π–¥–∏ –Ω–∞—Ö—É–π',
                '–Ω—î, —Ç–∏ –π–¥–∏ –Ω–∞—Ö—É–π',
            ]
            await message.reply(choice(answer_list))
        elif len(message.text) > 3 and message.text.endswith('?'):
            answer_list = [
                '–ù–µ –∑–Ω–∞—é.',
                '–í –º–µ–Ω–µ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.',
                '–ô–º–æ–≤—ñ—Ä–Ω–æ, —â–æ —Ç–∞–∫.',
                '–¢–∞–∫.',
                '–ù—ñ.',
                '–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–µ.',
                '–¢–∏ –∑–∞–¥–∞—î—à —è–∫—ñ—Å—å –¥–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.',
                '–Ø –Ω–µ —Ö–æ—á—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ü–µ.',
                '–ë—ñ–ª—å—à—ñ—Å—Ç—å –∑–∞ –≤—Å–µ, —â–æ —Ç–∞–∫.',
                '–î–∞, —î—Ç–æ —Ç–∞–∫.',
                '–ù—ñ—á–æ',
                '–ù—ñ—á–æ, –∞ —à–æ.',
                '–ù—î, –∞ —à–æ.',
                '–°–∞–º —Ç–∞–∫–∏–π.',
                '–î–æ–±—Ä–µ',
                '–ó—Ä–æ–∑—É–º—ñ–≤',
                '–û–∫',
                '–Ø —Ö–∞—á—É –ø—ñ—Ç—Å–∏',
                '–ü—ñ—à–æ–≤ –Ω–∞—Ö—É–π',
                '–î–µ?',
                '–°–æ—Å–∏ —Ö—É—è',
            ]
            await message.reply(choice(answer_list))
        else:
            data = main_objects_initialization.extract_random_data.get_conversation_data()
            await message.reply(f'{get_random_data(data)}')


@dp.message_handler(regexp='–∞–Ω—ñ–º–µ|–±–µ—Ä—Å—î—Ä–∫|–±—î—Ä—Å—î—Ä–∫|–±–µ—Ä—Å–µ—Ä–∫|—á–µ–ª–æ–≤–µ–∫ –±–µ–Ω–∑–æ–ø–∏–ª–∞|—á—î–ª–æ–≤—î–∫ –±–µ–Ω–∑–æ–ø–∏–ª–∞')
async def mention_anime(message: types.Message):
    await message.reply('–ê–ù–Ü–ú–ï - –ì–ê–í–ù–û!!!üí©üí©üí©')


@dp.message_handler(regexp='martyn|–º–∞—Ä—Ç–∏–Ω|–¥—Ç—Ä')
async def mention_bot(message: types.Message):
    data = main_objects_initialization.extract_random_data.get_conversation_data()
    await message.reply(f'{get_random_data(data)}')


@dp.message_handler(regexp='—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ|—É–∫—Ä–∞—ó–Ω—ñ —Å–ª–∞–≤–∞')
async def mention_glory(message: types.Message):
    await message.reply('–ì–ï–†–û–Ø–ú –°–õ–ê–í–ê!!!')


@dp.message_handler(regexp='—Å–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó')
async def mention_nation(message: types.Message):
    await message.reply('–°–ú–ï–†–¢–¨ –í–û–†–û–ì–ê–ú!!!')


@dp.message_handler(regexp='–£–∫—Ä–∞—ó–Ω–∞')
async def mention_ukraine(message: types.Message):
    await message.reply('–ü–û–ù–ê–î –£–°–ï!!!')


@dp.message_handler(regexp='–ø—É—Ç—ñ–Ω|–ø–∏–Ω—è|—Ä—î–∑—ñ–Ω–æ–≤–∞—è –ø–æ–ø–∞|—Ä—î–∑—ñ–Ω–∞–≤–∞—è –ø–æ–ø–∞|–ø—É—Ç—è|–ø–∏–Ω—å–∫–∞|putin')
async def mention_putin(message: types.Message):
    await message.reply('–•–£–ô–õ–û!!!')


@dp.message_handler(regexp='–±—Ä–∞–≤–ª|brawl')
async def mention_brawl(message: types.Message):
    await message.reply('–ë–†–ê–í–õ–Ü–ö - –•–£–Ø–í–õ–Ü–ö')


@dp.message_handler(regexp='sophie|sofiia|sofi|—Å–æ—Ñ—ñ|—Å–æ—Ñ–∏')
async def call_sofi(message: types.Message):
    for i in range(0, 5):
        user_id = 639092726
        user_name = 'SOFI'
        mention = '[' + user_name + '](tg://user?id=' + str(user_id) + ')'
        bot_msg = f'WAKE UP, {mention}!!!'
        await bot.send_message(message.chat.id, bot_msg, parse_mode='Markdown')


@dp.message_handler(content_types=ContentType.TEXT)
async def call_sofi_again(message: types.Message):
    answer_probability = randint(1, 50)

    if answer_probability == 1:
        user_id = 639092726
        user_name = '–°–æ—Ñ—ñ'
        mention = '[' + user_name + '](tg://user?id=' + str(user_id) + ')'

        bot_msg = [
            f'–°–ª—É—É—É—É—Ö–∞–π...–ø–æ—Ä–∞ –±–∏ –ø—ñ–¥–∫–∞—á–∞—Ç–∏—Å—å, {mention}!!!',
            f'–ö–∞—á–∞–ª–∫–∞ —Ü–µ –¥–æ–±—Ä–µ, {mention}!!!',
            f'–ô–¥–∏ –∫–∞—á–∞–π –±–∞–Ω–∫–∏, {mention}!!!',
            f'–Ø –± –Ω–∞ —Ç–≤–æ–º—É –º—ñ—Å—Ü—ñ –ø—ñ–¥–∫–∞—á–∞–≤—Å—è, {mention}.',
            f'–ù–µ —Ö–æ—á–µ—à –ø–æ–∫–∞—á–∞—Ç–∏—Å—å —Ç—Ä–æ—Ö–∏, {mention}???',
            f'–Ø –Ω–µ –º–æ–∂—É –∫–∞—á–∞—Ç–∏—Å—å, –±–æ —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∞–ª–µ —Ç–∏ –º–æ–∂–µ. –ü–æ—Ä–∞, {mention}!!!'
        ]

        await bot.send_message(message.chat.id, choice(bot_msg), parse_mode='Markdown')

    await check_bot_usage(message)


@dp.message_handler(content_types=ContentType.ANY)
async def check_bot_usage(message: types.Message):
    chat_id = message.chat.id
    bot_id = message.bot.id
    user_id = message.from_id
    username = message.from_user.username
    full_name = message.from_user.full_name
    message_id = message.message_id

    print('Message chat id:', chat_id)
    print('Bot id:', bot_id)
    print('From what id message:', user_id)
    print('From what username:', username)
    print('From user full name:', full_name)
    print('Message id:', message_id)
    print('Message text:', message.text, '\n')

    if username is None:
        username = ' '

    if full_name is None:
        full_name = ' '

    main_objects_initialization.store_users_data.connect_to_db(user_id, username, full_name, chat_id)
